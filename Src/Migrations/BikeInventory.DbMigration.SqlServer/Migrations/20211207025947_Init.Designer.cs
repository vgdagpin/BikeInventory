// <auto-generated />
using System;
using BikeInventory.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BikeInventory.DbMigration.SqlServer.Migrations
{
    [DbContext(typeof(BikeInventoryDbContext))]
    [Migration("20211207025947_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BikeInventory.Application.Common.Entities.tbl_Bike", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<short>("ModelID")
                        .HasColumnType("smallint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("ModelID");

                    b.ToTable("tbl_Bike", "dbo");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ModelID = (short)1,
                            Status = "Available"
                        },
                        new
                        {
                            ID = 2,
                            ModelID = (short)1,
                            Status = "Available"
                        },
                        new
                        {
                            ID = 3,
                            ModelID = (short)1,
                            Status = "Available"
                        },
                        new
                        {
                            ID = 4,
                            ModelID = (short)1,
                            Status = "Available"
                        },
                        new
                        {
                            ID = 5,
                            ModelID = (short)1,
                            Status = "Available"
                        },
                        new
                        {
                            ID = 6,
                            ModelID = (short)2,
                            Status = "Available"
                        },
                        new
                        {
                            ID = 7,
                            ModelID = (short)2,
                            Status = "Available"
                        },
                        new
                        {
                            ID = 8,
                            ModelID = (short)2,
                            Status = "Available"
                        },
                        new
                        {
                            ID = 9,
                            ModelID = (short)2,
                            Status = "Available"
                        },
                        new
                        {
                            ID = 10,
                            ModelID = (short)2,
                            Status = "Available"
                        },
                        new
                        {
                            ID = 11,
                            ModelID = (short)3,
                            Status = "Available"
                        },
                        new
                        {
                            ID = 12,
                            ModelID = (short)3,
                            Status = "Available"
                        },
                        new
                        {
                            ID = 13,
                            ModelID = (short)3,
                            Status = "Available"
                        },
                        new
                        {
                            ID = 14,
                            ModelID = (short)3,
                            Status = "Available"
                        },
                        new
                        {
                            ID = 15,
                            ModelID = (short)3,
                            Status = "Available"
                        },
                        new
                        {
                            ID = 16,
                            ModelID = (short)3,
                            Status = "Available"
                        },
                        new
                        {
                            ID = 17,
                            ModelID = (short)3,
                            Status = "Available"
                        },
                        new
                        {
                            ID = 18,
                            ModelID = (short)3,
                            Status = "Available"
                        },
                        new
                        {
                            ID = 19,
                            ModelID = (short)3,
                            Status = "Available"
                        },
                        new
                        {
                            ID = 20,
                            ModelID = (short)3,
                            Status = "Available"
                        });
                });

            modelBuilder.Entity("BikeInventory.Application.Common.Entities.tbl_BikeModel", b =>
                {
                    b.Property<short>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("tbl_BikeModel", "dbo");

                    b.HasData(
                        new
                        {
                            ID = (short)1,
                            Name = "A1"
                        },
                        new
                        {
                            ID = (short)2,
                            Name = "A2"
                        },
                        new
                        {
                            ID = (short)3,
                            Name = "A3"
                        });
                });

            modelBuilder.Entity("BikeInventory.Application.Common.Entities.tbl_BikeRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("BikeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("RatePerMinute")
                        .HasColumnType("DECIMAL(20,6)");

                    b.HasKey("ID");

                    b.HasIndex("BikeID");

                    b.ToTable("tbl_BikeRate", "dbo");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BikeID = 1,
                            EffectiveStartDate = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RatePerMinute = 0.25m
                        },
                        new
                        {
                            ID = 2,
                            BikeID = 2,
                            EffectiveStartDate = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RatePerMinute = 0.25m
                        },
                        new
                        {
                            ID = 3,
                            BikeID = 3,
                            EffectiveStartDate = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RatePerMinute = 0.25m
                        },
                        new
                        {
                            ID = 4,
                            BikeID = 4,
                            EffectiveStartDate = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RatePerMinute = 0.25m
                        },
                        new
                        {
                            ID = 5,
                            BikeID = 5,
                            EffectiveStartDate = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RatePerMinute = 0.25m
                        },
                        new
                        {
                            ID = 6,
                            BikeID = 6,
                            EffectiveStartDate = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RatePerMinute = 0.25m
                        },
                        new
                        {
                            ID = 7,
                            BikeID = 7,
                            EffectiveStartDate = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RatePerMinute = 0.25m
                        },
                        new
                        {
                            ID = 8,
                            BikeID = 8,
                            EffectiveStartDate = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RatePerMinute = 0.25m
                        },
                        new
                        {
                            ID = 9,
                            BikeID = 9,
                            EffectiveStartDate = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RatePerMinute = 0.25m
                        },
                        new
                        {
                            ID = 10,
                            BikeID = 10,
                            EffectiveStartDate = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RatePerMinute = 0.25m
                        },
                        new
                        {
                            ID = 11,
                            BikeID = 11,
                            EffectiveStartDate = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RatePerMinute = 0.25m
                        },
                        new
                        {
                            ID = 12,
                            BikeID = 12,
                            EffectiveStartDate = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RatePerMinute = 0.25m
                        },
                        new
                        {
                            ID = 13,
                            BikeID = 13,
                            EffectiveStartDate = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RatePerMinute = 0.25m
                        },
                        new
                        {
                            ID = 14,
                            BikeID = 14,
                            EffectiveStartDate = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RatePerMinute = 0.25m
                        },
                        new
                        {
                            ID = 15,
                            BikeID = 15,
                            EffectiveStartDate = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RatePerMinute = 0.25m
                        },
                        new
                        {
                            ID = 16,
                            BikeID = 16,
                            EffectiveStartDate = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RatePerMinute = 0.25m
                        },
                        new
                        {
                            ID = 17,
                            BikeID = 17,
                            EffectiveStartDate = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RatePerMinute = 0.25m
                        },
                        new
                        {
                            ID = 18,
                            BikeID = 18,
                            EffectiveStartDate = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RatePerMinute = 0.25m
                        },
                        new
                        {
                            ID = 19,
                            BikeID = 19,
                            EffectiveStartDate = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RatePerMinute = 0.25m
                        },
                        new
                        {
                            ID = 20,
                            BikeID = 20,
                            EffectiveStartDate = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RatePerMinute = 0.25m
                        });
                });

            modelBuilder.Entity("BikeInventory.Application.Common.Entities.tbl_Customer", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("tbl_Customer", "dbo");
                });

            modelBuilder.Entity("BikeInventory.Application.Common.Entities.tbl_PaymentHandler", b =>
                {
                    b.Property<short>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("ID"), 1L, 1);

                    b.Property<string>("HandlerAssembly")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("HandlerClass")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LongDesc")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ShortDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TaskAssembly")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TaskClass")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("ID");

                    b.ToTable("tbl_PaymentHandler", "dbo");

                    b.HasData(
                        new
                        {
                            ID = (short)1,
                            HandlerAssembly = "BikeInventory.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
                            HandlerClass = "BikeInventory.Application.Handlers.Commands.PaymentCmds.PaymentCmdHandler_GCash",
                            LongDesc = "GCash",
                            ShortDesc = "GCash",
                            TaskAssembly = "BikeInventory, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
                            TaskClass = "BikeInventory.Commands.PaymentCmds.PaymentCmd"
                        },
                        new
                        {
                            ID = (short)2,
                            HandlerAssembly = "BikeInventory.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
                            HandlerClass = "BikeInventory.Application.Handlers.Commands.PaymentCmds.PaymentCmdHandler_Paymaya",
                            LongDesc = "Paymaya",
                            ShortDesc = "Paymaya",
                            TaskAssembly = "BikeInventory, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
                            TaskClass = "BikeInventory.Commands.PaymentCmds.PaymentCmd"
                        });
                });

            modelBuilder.Entity("BikeInventory.Application.Common.Entities.tbl_PaymentHandlerSetting", b =>
                {
                    b.Property<string>("Environment")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Type")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Code")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Environment", "Type", "Code");

                    b.ToTable("tbl_PaymentHandlerSetting", "dbo");

                    b.HasData(
                        new
                        {
                            Environment = "Dev",
                            Type = "PSC_GCash",
                            Code = "Url",
                            Value = "https://localhost:44357"
                        },
                        new
                        {
                            Environment = "Dev",
                            Type = "PSC_Paymaya",
                            Code = "Url",
                            Value = "https://localhost:44343"
                        });
                });

            modelBuilder.Entity("BikeInventory.Application.Common.Entities.tbl_Receipt", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("PaymentReference")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("RentalTransactionID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("RentalTransactionID")
                        .IsUnique();

                    b.ToTable("tbl_Receipt", "dbo");
                });

            modelBuilder.Entity("BikeInventory.Application.Common.Entities.tbl_RentalTransaction", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AttendantID")
                        .HasColumnType("int");

                    b.Property<int>("BikeID")
                        .HasColumnType("int");

                    b.Property<int>("BikeRateID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CheckedIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckedOut")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AttendantID");

                    b.HasIndex("BikeID");

                    b.HasIndex("BikeRateID");

                    b.HasIndex("CustomerID");

                    b.ToTable("tbl_RentalTransaction", "dbo");
                });

            modelBuilder.Entity("BikeInventory.Application.Common.Entities.tbl_User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("tbl_User", "dbo");

                    b.HasData(
                        new
                        {
                            ID = -1,
                            FirstName = "Super",
                            LastName = "Admin"
                        },
                        new
                        {
                            ID = 1,
                            FirstName = "User",
                            LastName = "Staff 1"
                        },
                        new
                        {
                            ID = 2,
                            FirstName = "User",
                            LastName = "Staff 2"
                        });
                });

            modelBuilder.Entity("BikeInventory.Application.Common.Entities.tbl_UserCredential", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiresOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FailedLoginCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsTemporaryPassword")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Password")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("TemporaryPassword")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ID");

                    b.ToTable("tbl_UserCredential", "dbo");

                    b.HasData(
                        new
                        {
                            ID = -1,
                            FailedLoginCount = 0,
                            IsTemporaryPassword = true,
                            Password = new byte[] { 197, 40, 2, 90, 195, 172, 59, 213, 107, 18, 99, 83, 234, 145, 48, 189, 29, 176, 237, 67, 47, 52, 136, 9, 49, 71, 105, 191, 181, 159, 172, 16 },
                            Salt = new byte[] { 48, 48, 48, 48, 48, 48, 48, 48, 45, 48, 48, 48, 48, 45, 48, 48, 48, 48, 45, 48, 48, 48, 48, 45, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49 },
                            TemporaryPassword = "admin",
                            Username = "admin@bike.com"
                        },
                        new
                        {
                            ID = 1,
                            FailedLoginCount = 0,
                            IsTemporaryPassword = true,
                            Password = new byte[] { 90, 222, 117, 211, 129, 107, 119, 212, 114, 215, 46, 244, 111, 193, 91, 50, 203, 40, 111, 221, 232, 118, 35, 171, 190, 224, 194, 94, 137, 102, 121, 47 },
                            Salt = new byte[] { 48, 48, 48, 48, 48, 48, 48, 48, 45, 48, 48, 48, 48, 45, 48, 48, 48, 48, 45, 48, 48, 48, 48, 45, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 50 },
                            TemporaryPassword = "staff1",
                            Username = "staff1@bike.com"
                        },
                        new
                        {
                            ID = 2,
                            FailedLoginCount = 0,
                            IsTemporaryPassword = true,
                            Password = new byte[] { 165, 4, 10, 239, 119, 73, 236, 58, 52, 216, 234, 65, 60, 50, 223, 115, 7, 187, 190, 113, 118, 243, 224, 206, 147, 255, 240, 178, 214, 97, 168, 37 },
                            Salt = new byte[] { 48, 48, 48, 48, 48, 48, 48, 48, 45, 48, 48, 48, 48, 45, 48, 48, 48, 48, 45, 48, 48, 48, 48, 45, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 50 },
                            TemporaryPassword = "staff2",
                            Username = "staff2@bike.com"
                        });
                });

            modelBuilder.Entity("BikeInventory.Application.Common.Entities.tbl_UserRole", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("ExpireOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.HasKey("UserID", "Role");

                    b.ToTable("tbl_UserRole", "dbo");

                    b.HasData(
                        new
                        {
                            UserID = -1,
                            Role = "admin",
                            IsEnabled = true
                        },
                        new
                        {
                            UserID = 1,
                            Role = "staff",
                            IsEnabled = true
                        },
                        new
                        {
                            UserID = 2,
                            Role = "staff",
                            IsEnabled = true
                        });
                });

            modelBuilder.Entity("BikeInventory.Application.Common.Entities.tbl_Bike", b =>
                {
                    b.HasOne("BikeInventory.Application.Common.Entities.tbl_BikeModel", "N_Model")
                        .WithMany("N_Bikes")
                        .HasForeignKey("ModelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("N_Model");
                });

            modelBuilder.Entity("BikeInventory.Application.Common.Entities.tbl_BikeRate", b =>
                {
                    b.HasOne("BikeInventory.Application.Common.Entities.tbl_Bike", "N_Bike")
                        .WithMany("N_BikeRates")
                        .HasForeignKey("BikeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("N_Bike");
                });

            modelBuilder.Entity("BikeInventory.Application.Common.Entities.tbl_Customer", b =>
                {
                    b.HasOne("BikeInventory.Application.Common.Entities.tbl_User", "N_User")
                        .WithOne()
                        .HasForeignKey("BikeInventory.Application.Common.Entities.tbl_Customer", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("N_User");
                });

            modelBuilder.Entity("BikeInventory.Application.Common.Entities.tbl_Receipt", b =>
                {
                    b.HasOne("BikeInventory.Application.Common.Entities.tbl_RentalTransaction", "N_RentalTransaction")
                        .WithOne("N_Receipt")
                        .HasForeignKey("BikeInventory.Application.Common.Entities.tbl_Receipt", "RentalTransactionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("N_RentalTransaction");
                });

            modelBuilder.Entity("BikeInventory.Application.Common.Entities.tbl_RentalTransaction", b =>
                {
                    b.HasOne("BikeInventory.Application.Common.Entities.tbl_User", "N_Attendant")
                        .WithMany()
                        .HasForeignKey("AttendantID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BikeInventory.Application.Common.Entities.tbl_Bike", "N_Bike")
                        .WithMany("N_RentalTransactions")
                        .HasForeignKey("BikeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BikeInventory.Application.Common.Entities.tbl_BikeRate", "N_BikeRate")
                        .WithMany()
                        .HasForeignKey("BikeRateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeInventory.Application.Common.Entities.tbl_Customer", "N_Customer")
                        .WithMany("N_RentalTransactions")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("N_Attendant");

                    b.Navigation("N_Bike");

                    b.Navigation("N_BikeRate");

                    b.Navigation("N_Customer");
                });

            modelBuilder.Entity("BikeInventory.Application.Common.Entities.tbl_UserCredential", b =>
                {
                    b.HasOne("BikeInventory.Application.Common.Entities.tbl_User", null)
                        .WithOne("N_UserCredential")
                        .HasForeignKey("BikeInventory.Application.Common.Entities.tbl_UserCredential", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BikeInventory.Application.Common.Entities.tbl_UserRole", b =>
                {
                    b.HasOne("BikeInventory.Application.Common.Entities.tbl_User", null)
                        .WithMany("N_UserRoles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BikeInventory.Application.Common.Entities.tbl_Bike", b =>
                {
                    b.Navigation("N_BikeRates");

                    b.Navigation("N_RentalTransactions");
                });

            modelBuilder.Entity("BikeInventory.Application.Common.Entities.tbl_BikeModel", b =>
                {
                    b.Navigation("N_Bikes");
                });

            modelBuilder.Entity("BikeInventory.Application.Common.Entities.tbl_Customer", b =>
                {
                    b.Navigation("N_RentalTransactions");
                });

            modelBuilder.Entity("BikeInventory.Application.Common.Entities.tbl_RentalTransaction", b =>
                {
                    b.Navigation("N_Receipt");
                });

            modelBuilder.Entity("BikeInventory.Application.Common.Entities.tbl_User", b =>
                {
                    b.Navigation("N_UserCredential");

                    b.Navigation("N_UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
